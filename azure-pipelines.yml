# Azure Pipelines YAML

variables:
  gitHubRepoURL: $(gitHubRepoURL) # Reference the variable defined in the Azure DevOps build definition
  githubToken: $(github_token) # Reference the variable defined in the Azure DevOps build definition
  vmHostname: '$(vmHostname)' # Reference the variable for your VM's hostname or IP address
  vmUserName: '$(vmUserName)' # Reference the variable for your VM's username
  vmPassword: '$(vmPassword)' # Reference the variable for your VM's password (mark this as a secret variable)

stages:

# Source Stage
- stage: Source
  jobs:
  - job: SourceJob
    pool:
      vmImage: 'ubuntu-latest' # Use a Microsoft-hosted agent for the Source stage
    steps:
    - checkout: none  # Skip checking out the repository since we'll clone it manually
    - script: |
        git clone https://$(githubUser):$(githubToken)@github.com/shivam-futureapp/frontend-py.git repo
      displayName: 'Clone Repository'
    - task: CopyFilesOverSSH@0
      inputs:
        sshEndpoint: $(azureServiceConnectionName)
        contents: 'repo/**' # Copy the entire cloned repository directory
        targetFolder: '/home/test-app_admin/'

# Deploy Stage
- stage: Deploy
  jobs:
  - deployment: DeployJob
    pool:
      vmImage: 'ubuntu-latest' # Use a Microsoft-hosted agent for the Deploy stage
    environment: development
    strategy:
      runOnce:
        deploy:
          steps:
          - task: SSH@0
            inputs:
              sshEndpoint: $(azureServiceConnectionName) # Replace with your VM's SSH endpoint
              runOptions: 'commands'
              commands: |
                # Navigate to the copied repository directory
                cd /home/test-app_admin/repo
                echo $(pwd)
                
                
                # Build Docker image
                sudo docker build -t testing:latest ./repo/ || exit 0
                sudo mkdir testing_dir
              readyTimeout: '20000'
          - task: ShellScript@2
            inputs:
              sshEndpoints: $(azureServiceConnectionName)
              runOptions: 'commands'
              commands: |
              
               sudo docker container run -d --name=app -p 80:5000 testing:latest
